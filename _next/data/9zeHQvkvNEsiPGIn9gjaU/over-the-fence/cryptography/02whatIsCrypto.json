{"pageProps":{"postData":{"filename":"02whatIsCrypto","title":"02暗号とは","topics":["暗号とは(復習)"],"article":"\n動画URL\n\n# 情報セキュリティ\n\n私たちが、コンピュータやインターネットを、安心して利用するためには、情報の盗聴や、改ざん、破壊などの不正行為や不慮の事故に対応し、情報を常に安全な状態にしておく必要があります。\n情報が安全な状態とは、どのような状態でしょうか。もう少し一般化して考えてみましょう。\n\n### 機密性\n例えば、肌身離さず持っているスマートフォンには、自分の情報がいっぱいです。\nもちろん自分は、スマートフォンの中身を見られないと困りますが、他の人には見られたくありません。\nそこで、パスワードや指紋認証、顔認証などを使用して、自分以外の人には見られないようにします。\nこのように、大切な情報は認められた人だけが、アクセスすることができる性質を持つ必要があります。\nこのような性質を**機密性**と言います。\n\n### 完全性\n大切な情報は、もちろん破壊されても困ります。パスワードをかけたスマートフォンは、確かに中身を見られることはないでしょう。\nしかし、スマートフォンを壊すことで、中の情報を破壊することは可能です。\nこの時に、中の情報をクラウド上にコピーしておけば、情報を破壊されることはありません。\nこのように、情報が破壊、または改ざん・消去されていない状態を確保する性質を**完全性**と言います。\n\n### 可用性\nクラウドにコピーをしたはいいものの、圏外で電波が届かず、情報にアクセスできなくなりました。\n今、どうしてもその情報が必要なのに困りましたね。\n大切な情報は、必要時に中断することなく、情報にアクセスできる状態を確保する必要もあり、この性質を**可用性**と言います。\n\n### 情報セキュリティの３要素\nここまでに紹介した、機密性・完全性・可用性の３つの性質を確保することを**情報セキュリティ**と言います。\n\n暗号は、この情報セキュリティを守るために、存在します。\n\n# 暗号技術\n\n## 暗号\n特定の相手だけに、情報を伝えたい場合、その相手だけが読める形にして、情報を送ることが一番確実です。\n送っている途中で、誰かに見られても読めないからです。\nこの、特定の相手だけに読める形にしたものが、**暗号**になります。\n\n第１回の[暗号の歴史](/over-the-fence/cryptography/01historyOfCrypto/)で紹介したシーザー暗号を例に見てみましょう。\n\n\n### シーザー暗号を使ったメッセージの送信\nアリスはボブに以下のメッセージを送りたいと考えています。\n\n```msg:もとのメッセージ\nHello I am Alice\n```\n\nしかし、メッセージを盗聴しようと企んでいる悪い人、イブが存在します。\nそこで、イブに盗聴されても大丈夫なように、メッセージを暗号化して、送ることにしました。\n使う暗号化の手法はシーザー暗号です。\n\nシーザー暗号はアルファベット順に文字をずらします。\nここでは、アリスは３文字ずらすことにしたので、暗号にしたメッセージは次のようになります。\n\n```msg:暗号化したメッセージ\nKhoor L dp Dolfh\n```\n\nもちろん、ボブには事前にこのことを、伝えています。\n\nこのメッセージを実際にボブに送りました。\n途中、運悪くイブに盗聴されてしまいましたが、イブはメッセージを理解することができませんでした。\n\n一方、ボブは、事前に暗号のことを知っていたので、３文字逆にずらして、もとのメッセージに戻し、内容を知ることが出来ました。\n\n### 暗号の世界での用語\nこれまでの例について、暗号の世界では、次のように名前をつけています。\n\n- もとのメッセージのことを**平文**と言います。\n- 暗号化したメッセージのことを **暗号文\\(または暗号\\)** と言います。\n- アリスがしたように、平文から暗号文にすることを**暗号化**と言います。\n- ボブがしたように、暗号文を平文に戻すことを**復号**と言います。\n- 「アルファベット順にずらす」のように、暗号化・復号の処理の手順を**暗号アルゴリズム**と言います。\n- 「３文字ずらす」のように、暗号化・復号の際に用いる平文とは独立した情報のことを**鍵**と言います。\n\nシーザー暗号では、「１文字ずらす」から「２６文字ずらす」の２６種類の鍵が存在します。\nつまり、イブは少し面倒ですが、「１文字ずらす」から「２６文字ずらす」の２６通りを試せば、もとのメッセージを知ることができます。\n\n第１回の[暗号の歴史](/over-the-fence/cryptography/01historyOfCrypto/)のエニグマのところでも話ましたが、現在の暗号の考え方では、暗号アルゴリズムを隠しておくことは、得策とはされていません。\nなぜなら、隠しておけないからです。隠しておけるならば、そもそも暗号は要りませんよね。\n\n今回は２６通り試せば、暗号を突破出来ます。これが、１０００通りや１００００通り試さなければいけないとなると、イブは途中で諦めてしまうかもしれません。\nつまり、使える鍵の種類が、その暗号の強さになります。鍵の種類が多いと、それだけ試さなければいけないパターンも多くなります。\n\n鍵の種類は、鍵の長さに比例します。\nここでいう鍵の長さとは、桁数のことです。シーザー暗号は最大で「２６文字ずらす」の２桁ですね。\nコンピュータの世界では、ビットを使って物事を表すので、ビットの桁数が鍵の長さになります。\n\n暗号の世界では、次のように名前をつけています。\n\n- 使用できる鍵の種類の多さのことを**鍵空間**と言います。\n- ビットの桁数などの、鍵の長さのことを**鍵長**と言います。\n\nここで、用語について整理しておきましょう。\n\n|用語|意味|\n|----|----|\n|平文|もとの情報|\n|暗号(暗号文)|第三者が見てもわからないように変換したもの|\n|暗号化|平文から暗号へ変換すること|\n|復号|暗号から平文に戻すこと|\n|暗号アルゴリズム|暗号化や復号の処理を行う際の手順|\n|鍵|暗号化や復号の際に用いる平文とは独立した情報|\n|鍵空間|使用できる鍵の種類の多さ|\n|鍵長|鍵の長さ。一般にビット(bit)で表す。|\n\nこれらは、シーザー暗号に限らず、色々な暗号の手法に共通しているので、用語として名前がついています。\n\n## ハッシュ関数\n\n### ハッシュ関数とは\n少し変わった暗号技術にハッシュ関数というものがあります。\nハッシュ関数とは、任意の長さのメッセージから、決まった長さのデータを生成する関数です。\n生成されたデータを**ハッシュ値**と呼びます。\n\n次の例は、メッセージからハッシュ値を生成したものです。\n\n```msg:MD5\nもとのメッセージ　　: Hello I am Alice\n生成されたハッシュ値: c66660942e5eeaa6de5013cb3e286daf\n```\n\nハッシュ関数は、次のような特徴があります。\n\n- もとのデータとハッシュ値の間に規則性がない。\n- 異なるメッセージからは、異なるハッシュ値が生成される。\n- ハッシュ値からもとのデータを効率よく求めることが出来ない。\n- 同じハッシュ値になるもとのデータを容易に見つけることが出来ない。\n\nこれらの特徴から、メッセージが改ざんされているかを、確認するのに利用されています。\n\n### ハッシュ関数を使った改ざんの防止\n例えば、AliceからBobに次のようにメッセージと生成したハッシュ値を送信するとしましょう。\nハッシュ値は、事前にBobと打ち合わせた鍵で暗号化して送ります。\n\n```msg:AliceからBobに送られるメッセージ\nもとのメッセージ　: Hello I am Alice\n生成したハッシュ値: c66660942e5eeaa6de5013cb3e286daf\n```\n\n途中イブが、次のようにメッセージを改ざんします。\n\n```msg:改ざんされたメッセージ\n改ざんされたメッセージ: I hate you\n```\n\nボブは、イブが改ざんしたメッセージを受け取ることになります。\nボブは、鍵を使って暗号化されたハッシュ値を復号します。\n\n```\nハッシュ値: c66660942e5eeaa6de5013cb3e286daf\n```\n\nまた、送られてきたメッセージから、ハッシュ関数を使用して、ハッシュ値を求めます。\n\n```\nハッシュ値: d2ec37d88bcbc82daf652c2a0a50d123\n```\n\nもちろん、改ざんされたもとのメッセージと異なるメッセージからハッシュ値を求めるので、復号したハッシュ値とは異なるものになります。\nよって、改ざんされていることが、わかります。\nもとのハッシュ値は暗号化されているので、イブは、もとのハッシュ値を知ることが出来ません。よって、ハッシュ値自体を改ざんすることも不可能です。\n\n# 終わりに\n\nこのように、暗号で機密性を、ハッシュ関数で完全性を、といったふうに暗号技術は、情報セキュリティを実現するために大切な技術になります。","date":"2022/3/2 23:27:00","category":"over-the-fence","published":false}},"__N_SSG":true}